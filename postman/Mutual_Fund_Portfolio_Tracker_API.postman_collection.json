{
	"info": {
		"_postman_id": "mutual-fund-portfolio-tracker-api-v2",
		"name": "Mutual Fund Portfolio Tracker API",
		"description": "Complete API collection for the Mutual Fund Portfolio Tracker application with comprehensive test scenarios.\n\n## Base URL\n- Development: `http://localhost:5000`\n- Production: `{{base_url}}`\n\n## Authentication\nMost endpoints require JWT authentication. After login, the token is automatically set in the `auth_token` variable.\n\n## New Schema Features\n- **Three-Collection Architecture**: Portfolio + Transactions + Holdings\n- **avgNav Calculation**: Weighted average NAV like Groww/Kuvera\n- **FIFO P&L**: Accurate profit/loss calculation using FIFO method\n- **Transaction History**: Complete audit trail of all buy/sell operations\n- **30 NAV History**: Recent 30 NAV entries per fund for performance\n\n## Available Endpoints\n- **Authentication**: Signup, Login, Profile\n- **Funds**: Search, Details, NAV History\n- **Portfolio**: Add, Sell, Value, List, History\n- **Transactions**: History\n- **Admin**: User Management, System Stats\n\n## Test Scenarios\nEach request includes multiple examples covering:\n- ✅ Success cases with avgNav and P&L\n- ❌ Validation errors\n- ❌ Authentication errors\n- ❌ Business logic errors\n\n## Environment Variables\n- `base_url`: API base URL (without /api)\n- `auth_token`: JWT token (auto-set after login)\n- `user_id`: Current user ID (auto-set after login)\n- `scheme_code`: Sample scheme code for testing\n- `admin_email`: Admin user email (from env variables)\n- `admin_password`: Admin user password (from env variables)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "User Signup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('auth_token', response.token);",
									"    pm.environment.set('user_id', response.user.id);",
									"    pm.test('User registered successfully', () => {",
									"        pm.expect(response.success).to.be.true;",
									"        pm.expect(response.token).to.exist;",
									"        pm.expect(response.user).to.exist;",
									"    });",
									"} else {",
									"    pm.test('Error response format', () => {",
									"        const response = pm.response.json();",
									"        pm.expect(response.success).to.be.false;",
									"        pm.expect(response.message).to.exist;",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"John Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"password\": \"SecurePass123!\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/signup",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"signup"
							]
						},
						"description": "Register a new user account"
					},
					"response": [
						{
							"name": "Success Case",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"John Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"password\": \"SecurePass123!\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/auth/signup",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"auth",
										"signup"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"message\": \"User registered successfully\",\n  \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n  \"user\": {\n    \"id\": \"64f1a2b3c4d5e6f7g8h9i0j1\",\n    \"name\": \"John Doe\",\n    \"email\": \"john.doe@example.com\",\n    \"role\": \"user\",\n    \"createdAt\": \"2024-01-15T10:30:00.000Z\"\n  }\n}"
						},
						{
							"name": "Weak Password (400)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Jane Doe\",\n  \"email\": \"jane.doe@example.com\",\n  \"password\": \"123\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/auth/signup",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"auth",
										"signup"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"message\": \"Validation failed\",\n  \"errors\": [\n    {\n      \"field\": \"password\",\n      \"message\": \"Password must be at least 8 characters long and contain uppercase, lowercase, number and special character\"\n    }\n  ]\n}"
						},
						{
							"name": "Invalid Email (400)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Bob Smith\",\n  \"email\": \"invalid-email\",\n  \"password\": \"SecurePass123!\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/auth/signup",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"auth",
										"signup"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"message\": \"Validation failed\",\n  \"errors\": [\n    {\n      \"field\": \"email\",\n      \"message\": \"Please enter a valid email address\"\n    }\n  ]\n}"
						},
						{
							"name": "Missing Name (400)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"test@example.com\",\n  \"password\": \"SecurePass123!\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/auth/signup",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"auth",
										"signup"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"message\": \"Validation failed\",\n  \"errors\": [\n    {\n      \"field\": \"name\",\n      \"message\": \"Name is required\"\n    }\n  ]\n}"
						},
						{
							"name": "Duplicate Email (409)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"John Duplicate\",\n  \"email\": \"john.doe@example.com\",\n  \"password\": \"AnotherPass123!\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/auth/signup",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"auth",
										"signup"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"message\": \"Email already registered\"\n}"
						}
					]
				},
				{
					"name": "User Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('auth_token', response.token);",
									"    pm.environment.set('user_id', response.user.id);",
									"    pm.test('Login successful', () => {",
									"        pm.expect(response.success).to.be.true;",
									"        pm.expect(response.token).to.exist;",
									"        pm.expect(response.user).to.exist;",
									"    });",
									"} else {",
									"    pm.test('Error response format', () => {",
									"        const response = pm.response.json();",
									"        pm.expect(response.success).to.be.false;",
									"        pm.expect(response.message).to.exist;",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"john.doe@example.com\",\n  \"password\": \"SecurePass123!\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						},
						"description": "Login with user credentials"
					},
					"response": [
						{
							"name": "Success Case",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"john.doe@example.com\",\n  \"password\": \"SecurePass123!\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/auth/login",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"auth",
										"login"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"message\": \"Login successful\",\n  \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n  \"user\": {\n    \"id\": \"64f1a2b3c4d5e6f7g8h9i0j1\",\n    \"name\": \"John Doe\",\n    \"email\": \"john.doe@example.com\",\n    \"role\": \"user\"\n  }\n}"
						},
						{
							"name": "Wrong Password (401)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"john.doe@example.com\",\n  \"password\": \"WrongPassword123!\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/auth/login",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"auth",
										"login"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"message\": \"Invalid email or password\"\n}"
						},
						{
							"name": "User Not Found (401)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"nonexistent@example.com\",\n  \"password\": \"SecurePass123!\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/auth/login",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"auth",
										"login"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"message\": \"Invalid email or password\"\n}"
						},
						{
							"name": "Missing Fields (400)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"john.doe@example.com\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/auth/login",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"auth",
										"login"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"message\": \"Validation failed\",\n  \"errors\": [\n    {\n      \"field\": \"password\",\n      \"message\": \"Password is required\"\n    }\n  ]\n}"
						}
					]
				},
				{
					"name": "Admin Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.environment.set('auth_token', response.token);",
									"    pm.environment.set('user_id', response.user.id);",
									"    pm.environment.set('user_role', response.user.role);",
									"    pm.test('Admin login successful', () => {",
									"        pm.expect(response.success).to.be.true;",
									"        pm.expect(response.token).to.exist;",
									"        pm.expect(response.user.role).to.equal('admin');",
									"    });",
									"} else {",
									"    pm.test('Error response format', () => {",
									"        const response = pm.response.json();",
									"        pm.expect(response.success).to.be.false;",
									"        pm.expect(response.message).to.exist;",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"{{admin_email}}\",\n  \"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						},
						"description": "Login as admin user with admin role"
					},
					"response": [
						{
							"name": "Admin Login Success",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"{{admin_email}}\",\n  \"password\": \"{{admin_password}}\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/auth/login",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"auth",
										"login"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"message\": \"Login successful\",\n  \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n  \"user\": {\n    \"id\": \"64f8a1b2c3d4e5f6a7b8c9d0\",\n    \"name\": \"Admin User\",\n    \"email\": \"admin@mutualfund.com\",\n    \"role\": \"admin\"\n  }\n}"
						}
					]
				}
			]
		},
		{
			"name": "Funds",
			"item": [
				{
					"name": "Get All Funds",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.test('Funds retrieved successfully', () => {",
									"        pm.expect(response.success).to.be.true;",
									"        pm.expect(response.data.funds).to.be.an('array');",
									"        pm.expect(response.data.pagination).to.exist;",
									"    });",
									"    if (response.data.funds.length > 0) {",
									"        pm.environment.set('scheme_code', response.data.funds[0].schemeCode);",
									"    }",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/funds?page=1&limit=20",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"funds"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "20"
								}
							]
						},
						"description": "Retrieve all mutual funds with pagination"
					},
					"response": [
						{
							"name": "Success Case",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/funds?page=1&limit=20",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"funds"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "limit",
											"value": "20"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": {\n    \"funds\": [\n      {\n        \"schemeCode\": 152075,\n        \"schemeName\": \"ICICI Prudential Bluechip Fund - Growth\",\n        \"fundHouse\": \"ICICI Prudential Mutual Fund\",\n        \"schemeCategory\": \"Equity Scheme - Large Cap Fund\",\n        \"schemeType\": \"Open Ended Schemes\"\n      }\n    ],\n    \"pagination\": {\n      \"currentPage\": 1,\n      \"totalPages\": 50,\n      \"totalFunds\": 1000,\n      \"limit\": 20,\n      \"hasNext\": true,\n      \"hasPrev\": false\n    }\n  }\n}"
						}
					]
				},
				{
					"name": "Search Funds",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/funds/search?query=bluechip&page=1&limit=10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"funds",
								"search"
							],
							"query": [
								{
									"key": "query",
									"value": "bluechip"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "10"
								}
							]
						},
						"description": "Search funds by name or fund house"
					}
				},
				{
					"name": "Get Fund NAV History",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/funds/{{scheme_code}}/nav?days=30",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"funds",
								"{{scheme_code}}",
								"nav"
							],
							"query": [
								{
									"key": "days",
									"value": "30"
								}
							]
						},
						"description": "Get NAV history for a specific fund"
					}
				}
			]
		},
		{
			"name": "Portfolio",
			"item": [
				{
					"name": "Add Fund to Portfolio",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    pm.test('Fund added to portfolio successfully', () => {",
									"        pm.expect(response.success).to.be.true;",
									"        pm.expect(response.data).to.exist;",
									"    });",
									"} else {",
									"    pm.test('Error response format', () => {",
									"        const response = pm.response.json();",
									"        pm.expect(response.success).to.be.false;",
									"        pm.expect(response.message).to.exist;",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"schemeCode\": {{scheme_code}},\n  \"units\": 100.5\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/portfolio/add",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"portfolio",
								"add"
							]
						},
						"description": "Add mutual fund units to user's portfolio"
					},
					"response": [
						{
							"name": "Success Case",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"schemeCode\": 152075,\n  \"units\": 100.5\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/portfolio/add",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"portfolio",
										"add"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"message\": \"Fund added to portfolio successfully\",\n  \"data\": {\n    \"schemeCode\": 152075,\n    \"schemeName\": \"ICICI Prudential Bluechip Fund - Growth\",\n    \"units\": 100.5,\n    \"nav\": 45.67,\n    \"investmentAmount\": 4589.84,\n    \"addedAt\": \"2024-01-15T10:30:00.000Z\"\n  }\n}"
						},
						{
							"name": "Unauthorized (401)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"schemeCode\": 152075,\n  \"units\": 100.5\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/portfolio/add",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"portfolio",
										"add"
									]
								}
							},
							"status": "Unauthorized",
							"code": 401,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"message\": \"Access denied. No token provided or invalid format.\",\n  \"error\": \"Authentication required\"\n}"
						},
						{
							"name": "Invalid Scheme Code (404)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"schemeCode\": 999999,\n  \"units\": 100.5\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/portfolio/add",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"portfolio",
										"add"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"message\": \"Fund not found with the provided scheme code\"\n}"
						}
					]
				},
				{
					"name": "Get Portfolio Value",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/portfolio/value",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"portfolio",
								"value"
							]
						},
						"description": "Get current portfolio value with P&L calculation"
					}
				},
				{
					"name": "Get Portfolio List",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/portfolio/list",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"portfolio",
								"list"
							]
						},
						"description": "Get user's complete portfolio list"
					}
				},
				{
					"name": "Sell Fund from Portfolio",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.test('Fund sold successfully', () => {",
									"        pm.expect(response.success).to.be.true;",
									"        pm.expect(response.data).to.exist;",
									"        pm.expect(response.data.realizedPL).to.exist;",
									"    });",
									"} else {",
									"    pm.test('Error response format', () => {",
									"        const response = pm.response.json();",
									"        pm.expect(response.success).to.be.false;",
									"        pm.expect(response.message).to.exist;",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"schemeCode\": {{scheme_code}},\n  \"units\": 50.25\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/portfolio/sell",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"portfolio",
								"sell"
							]
						},
						"description": "Sell mutual fund units from portfolio with FIFO P&L calculation"
					},
					"response": [
						{
							"name": "Success Case",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"schemeCode\": 152075,\n  \"units\": 50.25\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/portfolio/sell",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"portfolio",
										"sell"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"message\": \"Fund sold from portfolio successfully\",\n  \"data\": {\n    \"transactionId\": \"64f1234567890abcdef12345\",\n    \"schemeCode\": 152075,\n    \"schemeName\": \"HDFC Flexi Cap Fund - Growth\",\n    \"units\": 50.25,\n    \"nav\": 725.45,\n    \"saleAmount\": 36453.88,\n    \"realizedPL\": 2150.75,\n    \"soldAt\": \"2023-09-01T10:30:00.000Z\"\n  }\n}"
						}
					]
				}
			]
		},
		{
			"name": "Transactions",
			"item": [
				{
					"name": "Get Transaction History",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.test('Transaction history retrieved successfully', () => {",
									"        pm.expect(response.success).to.be.true;",
									"        pm.expect(response.data).to.exist;",
									"        pm.expect(response.data.transactions).to.be.an('array');",
									"    });",
									"} else {",
									"    pm.test('Error response format', () => {",
									"        const response = pm.response.json();",
									"        pm.expect(response.success).to.be.false;",
									"        pm.expect(response.message).to.exist;",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/transactions?page=1&limit=50",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"transactions"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "50"
								},
								{
									"key": "schemeCode",
									"value": "{{scheme_code}}",
									"disabled": true
								},
								{
									"key": "type",
									"value": "BUY",
									"disabled": true
								}
							]
						},
						"description": "Get user's transaction history with optional filters"
					},
					"response": [
						{
							"name": "Success Case",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/transactions?page=1&limit=50",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"transactions"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "limit",
											"value": "50"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"message\": \"Transactions retrieved successfully\",\n  \"data\": {\n    \"transactions\": [\n      {\n        \"id\": \"64f1234567890abcdef12345\",\n        \"portfolioId\": \"64f1234567890abcdef54321\",\n        \"type\": \"BUY\",\n        \"units\": 100.5,\n        \"nav\": 650.75,\n        \"amount\": 65400.38,\n        \"date\": \"2023-08-15T09:30:00.000Z\",\n        \"createdAt\": \"2023-08-15T09:30:00.000Z\"\n      },\n      {\n        \"id\": \"64f1234567890abcdef12346\",\n        \"portfolioId\": \"64f1234567890abcdef54321\",\n        \"type\": \"SELL\",\n        \"units\": 50.25,\n        \"nav\": 725.45,\n        \"amount\": 36453.88,\n        \"date\": \"2023-09-01T10:30:00.000Z\",\n        \"createdAt\": \"2023-09-01T10:30:00.000Z\"\n      }\n    ],\n    \"count\": 2\n  }\n}"
						}
					]
				},
				{
					"name": "Rebuild Holdings from Transactions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.test('Holdings rebuilt successfully', () => {",
									"        pm.expect(response.success).to.be.true;",
									"        pm.expect(response.message).to.exist;",
									"    });",
									"} else {",
									"    pm.test('Error response format', () => {",
									"        const response = pm.response.json();",
									"        pm.expect(response.success).to.be.false;",
									"        pm.expect(response.message).to.exist;",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"schemeCode\": {{scheme_code}}\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/transactions/rebuild-holdings",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"transactions",
								"rebuild-holdings"
							]
						},
						"description": "Rebuild holdings from transaction history for data consistency"
					},
					"response": [
						{
							"name": "Success Case",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"schemeCode\": 152075\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/transactions/rebuild-holdings",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"transactions",
										"rebuild-holdings"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"message\": \"Holdings rebuilt successfully from transaction history\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "Admin",
			"item": [
				{
					"name": "Get All Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.test('Users retrieved successfully', () => {",
									"        pm.expect(response.success).to.be.true;",
									"        pm.expect(response.data).to.exist;",
									"        pm.expect(response.data.users).to.be.an('array');",
									"        pm.expect(response.data.pagination).to.exist;",
									"    });",
									"} else if (pm.response.code === 403) {",
									"    pm.test('Access denied for non-admin', () => {",
									"        const response = pm.response.json();",
									"        pm.expect(response.success).to.be.false;",
									"        pm.expect(response.message).to.include('Admin role required');",
									"    });",
									"} else {",
									"    pm.test('Error response format', () => {",
									"        const response = pm.response.json();",
									"        pm.expect(response.success).to.be.false;",
									"        pm.expect(response.message).to.exist;",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/admin/users?page=1&limit=20",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin",
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "20"
								},
								{
									"key": "search",
									"value": "john",
									"disabled": true
								},
								{
									"key": "role",
									"value": "user",
									"disabled": true
								}
							]
						},
						"description": "Get all users with pagination and filters (admin only)"
					},
					"response": [
						{
							"name": "Success Case",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/admin/users?page=1&limit=20",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"admin",
										"users"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "limit",
											"value": "20"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": true,\n  \"data\": {\n    \"users\": [\n      {\n        \"id\": \"64f1a2b3c4d5e6f7g8h9i0j1\",\n        \"name\": \"John Doe\",\n        \"email\": \"john.doe@example.com\",\n        \"role\": \"user\",\n        \"createdAt\": \"2024-01-15T10:30:00.000Z\",\n        \"updatedAt\": \"2024-01-15T10:30:00.000Z\"\n      }\n    ],\n    \"pagination\": {\n      \"currentPage\": 1,\n      \"totalPages\": 5,\n      \"totalUsers\": 100,\n      \"hasNext\": true,\n      \"hasPrev\": false\n    }\n  }\n}"
						},
						{
							"name": "Access Denied (403)",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/admin/users?page=1&limit=20",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"admin",
										"users"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "limit",
											"value": "20"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"success\": false,\n  \"message\": \"Access denied. Insufficient permissions.\",\n  \"error\": \"Required roles: admin, but user has: user\"\n}"
						}
					]
				},
				{
					"name": "Get System Statistics",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/admin/stats",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin",
								"stats"
							]
						},
						"description": "Get system statistics (admin only)"
					}
				},
				{
					"name": "Get All Portfolios",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.test('Portfolios retrieved successfully', () => {",
									"        pm.expect(response.success).to.be.true;",
									"        pm.expect(response.data).to.exist;",
									"        pm.expect(response.data.portfolios).to.be.an('array');",
									"    });",
									"} else {",
									"    pm.test('Error response format', () => {",
									"        const response = pm.response.json();",
									"        pm.expect(response.success).to.be.false;",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/admin/portfolios?page=1&limit=20",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin",
								"portfolios"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "20"
								}
							]
						},
						"description": "View all user portfolios (admin only)"
					}
				},
				{
					"name": "Get Popular Funds",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.test('Popular funds retrieved successfully', () => {",
									"        pm.expect(response.success).to.be.true;",
									"        pm.expect(response.data).to.exist;",
									"        pm.expect(response.data.popularFunds).to.be.an('array');",
									"    });",
									"} else {",
									"    pm.test('Error response format', () => {",
									"        const response = pm.response.json();",
									"        pm.expect(response.success).to.be.false;",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/admin/popular-funds?limit=10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin",
								"popular-funds"
							],
							"query": [
								{
									"key": "limit",
									"value": "10"
								}
							]
						},
						"description": "Get most invested funds (admin only)"
					}
				},
				{
					"name": "Get System Statistics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.test('System stats retrieved successfully', () => {",
									"        pm.expect(response.success).to.be.true;",
									"        pm.expect(response.data).to.exist;",
									"        pm.expect(response.data.totalUsers).to.be.a('number');",
									"        pm.expect(response.data.totalPortfolios).to.be.a('number');",
									"    });",
									"} else {",
									"    pm.test('Error response format', () => {",
									"        const response = pm.response.json();",
									"        pm.expect(response.success).to.be.false;",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/admin/stats",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin",
								"stats"
							]
						},
						"description": "Get system statistics (admin only)"
					}
				},
				{
					"name": "Manual NAV Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.test('NAV update triggered successfully', () => {",
									"        pm.expect(response.success).to.be.true;",
									"        pm.expect(response.message).to.include('NAV update');",
									"    });",
									"} else {",
									"    pm.test('Error response format', () => {",
									"        const response = pm.response.json();",
									"        pm.expect(response.success).to.be.false;",
									"    });",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/admin/cron/run-nav-update",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"admin",
								"cron",
								"run-nav-update"
							]
						},
						"description": "Manually trigger NAV update (admin only)"
					}
				}
			]
		},
		{
			"name": "System",
			"item": [
				{
					"name": "API Info",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								""
							]
						},
						"description": "Get API information and available endpoints"
					}
				},
				{
					"name": "API Endpoints Info",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api"
							]
						},
						"description": "Get detailed API endpoints information"
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Set base URL if not already set",
					"if (!pm.environment.get('base_url')) {",
					"    pm.environment.set('base_url', 'http://localhost:5000');",
					"}",
					"",
					"// Set sample scheme code if not already set",
					"if (!pm.environment.get('scheme_code')) {",
					"    pm.environment.set('scheme_code', '152075');",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:5000",
			"type": "string"
		},
		{
			"key": "auth_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "user_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "scheme_code",
			"value": "152075",
			"type": "string"
		}
	]
}